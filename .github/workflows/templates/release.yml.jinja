<%- set prepare_workflow_salt_version_input = "${{ inputs.salt-version }}" %>
<%- set gh_environment = "release" %>
<%- extends 'layout.yml.jinja' %>

<%- block on %>

on:
  workflow_dispatch:
    inputs:
      salt-version:
        type: string
        required: true
        description: The Salt version to get from staging to publish the release.

<%- endblock on %>

<%- block concurrency %>

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.repository }}
  cancel-in-progress: false

<%- endblock concurrency %>

<%- block permissions %>

permissions:
  contents: write  # To be able to publish the release

<%- endblock permissions %>

<%- block pre_jobs %>

  <%- set job_name = "check-requirements" %>

  <{ job_name }>:
  <%- do conclusion_needs.append(job_name) %>
    name: Check Requirements
    runs-on: ubuntu-latest
    steps:
      - name: Check For Admin Permission
        uses: actions-cool/check-user-permission@v2
        with:
          require: admin
          username: ${{ github.triggering_actor }}

      - name: Check Branch
        run: |

          {#-
              Should we allow other branches?
          #}
          echo "Trying to run the staging workflow from branch ${{ github.ref_name }}"
          if [ "${{ github.ref_name }}" != "master" ]; then
              echo "Running the staging workflow from the ${{ github.ref_name }} branch is not allowed"
              exit 1
          else
              echo "Allowed"
          fi

      - name: Clone The Salt Repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GHA_SSH_KEY }}
          fetch-depth: 0  # Full clone to also get the tags

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Setup GnuPG
        run: |
          sudo install -d -m 0700 -o "$(id -u)" -g "$(id -g)" /run/gpg
          GNUPGHOME="$(mktemp -d -p /run/gpg)"
          echo "GNUPGHOME=${GNUPGHOME}" >> "$GITHUB_ENV"
          cat <<EOF > "${GNUPGHOME}/gpg.conf"
          batch
          no-tty
          pinentry-mode loopback
          EOF

      - name: Get Secrets
        env:
          SECRETS_KEY: ${{ secrets.SECRETS_KEY }}
        run: |
          SECRETS_KEY_FILE=$(mktemp /tmp/output.XXXXXXXXXX)
          echo "$SECRETS_KEY" > "$SECRETS_KEY_FILE"
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256-2023 \
            --query SecretString --output text | jq .default_key -r | base64 -d \
            | gpg --passphrase-file "${SECRETS_KEY_FILE}" -d - \
            | gpg --import -
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256-2023 \
            --query SecretString --output text| jq .default_passphrase -r | base64 -d \
            | gpg --passphrase-file "${SECRETS_KEY_FILE}" -o "${GNUPGHOME}/passphrase" -d -
          rm "$SECRETS_KEY_FILE"
          echo "passphrase-file ${GNUPGHOME}/passphrase" >> "${GNUPGHOME}/gpg.conf"

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "Salt Project Packaging"
          git config --global user.email saltproject-packaging@vmware.com
          git config --global user.signingkey 64CBBC8173D76B3F
          git config --global commit.gpgsign true

      - name: Release Salt ${{ inputs.salt-version }}
        id: release
        run: |
          tools pkg repo publish release ${{ inputs.salt-version }}

      - name: Apply The Release Patch
        run: |
          git am --committer-date-is-author-date release-artifacts/salt-${{ inputs.salt-version }}.patch
          rm release-artifacts/salt-${{ inputs.salt-version }}.patch

      - name: Tag The v${{ inputs.salt-version }} Release
        run: |
          git tag -m "Release v${{ inputs.salt-version }}" -as v${{ inputs.salt-version }}

      - name: Push Changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          ssh: true
          tags: true
          atomic: true

      - name: Create Github Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifactErrorsFailBuild: true
          artifacts: ${{ steps.release.outputs.release-artifacts }}
          bodyFile: ${{ steps.release.outputs.release-messsage-file }}
          draft: false
          generateReleaseNotes: false
          makeLatest: ${{ steps.release.outputs.make-latest }}
          name: v${{ inputs.salt-version }}
          prerelease: ${{ contains(inputs.salt-version, 'rc') }}
          removeArtifacts: true
          replacesArtifacts: true
          tag: v${{ inputs.salt-version }}


<%- endblock pre_jobs %>


<%- block jobs %>
  <{- super() }>
  {#- We need the test.pypi.org upload job added here #}
  {#- We need the package upload tests against staging added here #}
<%- endblock jobs %>
