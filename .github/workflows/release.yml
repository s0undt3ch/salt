# Do not edit these workflows directly as the changes made will be overwritten.
# Instead, edit the template '.github/workflows/templates/release.yml.jinja'
---
name: Release

on:
  workflow_dispatch:
    inputs:
      salt-version:
        type: string
        required: true
        description: The Salt version to get from staging to publish the release.

env:
  COLUMNS: 190
  CACHE_SEED: SEED-2  # Bump the number to invalidate all caches
  RELENV_DATA: "${{ github.workspace }}/.relenv"
  REPO_BASE_URL: "https://${{ secrets.SALT_REPO_DOMAIN }}"

permissions:
  contents: write  # To be able to publish the release

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.repository }}
  cancel-in-progress: false

jobs:

  check-requirements:
    name: Check Requirements
    runs-on: ubuntu-latest
    steps:
      - name: Check For Admin Permission
        uses: actions-cool/check-user-permission@v2
        with:
          require: admin
          username: ${{ github.triggering_actor }}

      - name: Check Branch
        run: |
          echo "Trying to run the staging workflow from branch ${{ github.ref_name }}"
          if [ "${{ github.ref_name }}" != "master" ]; then
              echo "Running the staging workflow from the ${{ github.ref_name }} branch is not allowed"
              exit 1
          else
              echo "Allowed"
          fi

  prepare-workflow:
    name: Prepare Workflow Run
    runs-on: ubuntu-latest
    needs:
      - check-requirements
    outputs:
      salt-version: ${{ steps.setup-salt-version.outputs.salt-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full clone to also get the tags to get the right salt version

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Pretty Print The GH Actions Event
        run:
          tools ci print-gh-event

      - name: Setup Salt Version
        id: setup-salt-version
        uses: ./.github/actions/setup-salt-version
        with:
          salt-version: "${{ inputs.salt-version }}"
          validate-version: true

      - name: Check Existing Releases
        run: |
          tools pkg repo confirm-unreleased --repository ${{ github.repository }} ${{ steps.setup-salt-version.outputs.salt-version }}

  backup:
    name: Backup
    runs-on:
      - self-hosted
      - linux
      - repo-release
    needs:
      - prepare-workflow
    environment: release

    steps:
      - name: Clone The Salt Repository
        uses: actions/checkout@v3

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Backup Previous Releases
        run: |
          tools pkg repo backup-previous-releases

  publish-repositories:
    name: Publish Repositories
    runs-on:
      - self-hosted
      - linux
      - repo-release
    needs:
      - prepare-workflow
      - backup
    environment: release

    steps:
      - name: Clone The Salt Repository
        uses: actions/checkout@v3

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Publish Release Repository
        run: |
          tools pkg repo publish release --key-id=64CBBC8173D76B3F ${{ needs.prepare-workflow.outputs.salt-version }}
  test-amazon-repo:
    name: Test Amazon Linux Repository
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64
        version:
          - "2"
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
    environment: release
    container: ghcr.io/saltstack/salt-ci-containers/amazon-linux:${{ matrix.version }}
    needs:
      - prepare-workflow
      - publish-repositories

    steps:
      - name: Import GPG Key
        run: |
          rpm --import ${{ env.REPO_BASE_URL }}/amazon/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub

      - name: Import Repo File
        run: |
          curl -fsSL -o /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo ${{ env.REPO_BASE_URL }}/amazon/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo baseurl=${{ env.REPO_BASE_URL }}/amazon/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }} >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo gpgkey=${{ env.REPO_BASE_URL }}/amazon/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo

      - name: Install Salt
        run: |
          yum clean expire-cache
          yum install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  test-centos-repo:
    name: Test Centos Repository
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64
        version:
          - "7"
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
    environment: release
    container: ghcr.io/saltstack/salt-ci-containers/centos:${{ matrix.version }}
    needs:
      - prepare-workflow
      - publish-repositories

    steps:
      - name: Import GPG Key
        run: |
          rpm --import ${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub

      - name: Import Repo File
        run: |
          curl -fsSL -o /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo ${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo baseurl=${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }} >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo gpgkey=${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo

      - name: Install Salt
        run: |
          yum clean expire-cache
          yum install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  test-centos-stream-repo:
    name: Test Centos Stream Repository
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64
        version:
          - "8"
          - "9"
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
    environment: release
    container: ghcr.io/saltstack/salt-ci-containers/centos-stream:${{ matrix.version }}
    needs:
      - prepare-workflow
      - publish-repositories

    steps:
      - name: Import GPG Key
        run: |
          rpm --import ${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub

      - name: Import Repo File
        run: |
          curl -fsSL -o /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo ${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo baseurl=${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }} >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo gpgkey=${{ env.REPO_BASE_URL }}/redhat/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo

      - name: Install Salt
        run: |
          yum clean expire-cache
          yum install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  test-debian-repo:
    name: Test Debian Repository
    strategy:
      fail-fast: false
      matrix:
        include:
          - {"version": "10", "codename": "buster", "arch": "amd64"}
          - {"version": "10", "codename": "buster", "arch": "arm64"}
          - {"version": "11", "codename": "bullseye", "arch": "amd64"}
          - {"version": "11", "codename": "bullseye", "arch": "arm64"}
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
    environment: release
    container: ghcr.io/saltstack/salt-ci-containers/debian:${{ matrix.version }}
    needs:
      - prepare-workflow
      - publish-repositories

    steps:
      - name: Update System
        run: |
          apt-get update -y
          apt-get install -y curl

      - name: Download GPG Key
        run: |
          curl -fsSL -o /usr/share/keyrings/SALT-PROJECT-GPG-PUBKEY-2023.gpg \
            ${{ env.REPO_BASE_URL }}/debian/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version}}/SALT-PROJECT-GPG-PUBKEY-2023.gpg

      - name: Setup Repo
        run: |
          echo "deb [signed-by=/usr/share/keyrings/SALT-PROJECT-GPG-PUBKEY-2023.gpg arch=${{ matrix.arch }}] ${{ env.REPO_BASE_URL }}/debian/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version}} ${{ matrix.codename }} main" | sudo tee /etc/apt/sources.list.d/salt.list

      - name: Install Salt
        run: |
          apt-get update
          apt-get install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api
          yum install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  test-fedora-repo:
    name: Test Fedora Repository
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64
        version:
          - "36"
          - "37"
          - "38"
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
    environment: release
    container: ghcr.io/saltstack/salt-ci-containers/fedora:${{ matrix.version }}
    needs:
      - prepare-workflow
      - publish-repositories

    steps:
      - name: Import GPG Key
        run: |
          rpm --import ${{ env.REPO_BASE_URL }}/fedora/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub

      - name: Import Repo File
        run: |
          curl -fsSL -o /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo ${{ env.REPO_BASE_URL }}/fedora/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo baseurl=${{ env.REPO_BASE_URL }}/fedora/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }} >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo
          echo gpgkey=${{ env.REPO_BASE_URL }}/fedora/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version }}/SALT-PROJECT-GPG-PUBKEY-2023.pub >> /etc/yum.repos.d/salt-${{ needs.prepare-workflow.outputs.salt-version }}.repo

      - name: Install Salt
        run: |
          yum clean expire-cache
          yum install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  test-ubuntu-repo:
    name: Test Ubuntu Repository
    strategy:
      fail-fast: false
      matrix:
        include:
          - {"version": "20.04", "codename": "focal", "arch": "amd64"}
          - {"version": "20.04", "codename": "focal", "arch": "arm64"}
          - {"version": "22.04", "codename": "jammy", "arch": "amd64"}
          - {"version": "22.04", "codename": "jammy", "arch": "arm64"}
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}
    environment: release
    container: ghcr.io/saltstack/salt-ci-containers/ubuntu:${{ matrix.version }}
    needs:
      - prepare-workflow
      - publish-repositories

    steps:
      - name: Update System
        run: |
          apt-get update -y
          apt-get install -y curl

      - name: Download GPG Key
        run: |
          curl -fsSL -o /usr/share/keyrings/SALT-PROJECT-GPG-PUBKEY-2023.gpg \
            ${{ env.REPO_BASE_URL }}/ubuntu/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version}}/SALT-PROJECT-GPG-PUBKEY-2023.gpg

      - name: Setup Repo
        run: |
          echo "deb [signed-by=/usr/share/keyrings/SALT-PROJECT-GPG-PUBKEY-2023.gpg arch=${{ matrix.arch }}] ${{ env.REPO_BASE_URL }}/ubuntu/${{ matrix.version }}/${{ matrix.arch }}/minor/${{ needs.prepare-workflow.outputs.salt-version}} ${{ matrix.codename }} main" | sudo tee /etc/apt/sources.list.d/salt.list

      - name: Install Salt
        run: |
          apt-get update
          apt-get install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api
          yum install -y salt-master salt-minion salt-ssh salt-syndic salt-cloud salt-api

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  test-macos-repo:
    name: Test macOS Repository
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
        version:
          - "12"
    runs-on:
      - macos-${{ matrix.version }}
    environment: release
    needs:
      - prepare-workflow
      - publish-repositories

    steps:

      - name: Install Salt
        run: |
          curl -fsSL -o /tmp/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}.pkg \
            ${{ env.REPO_BASE_URL }}/macos/minor/${{ needs.prepare-workflow.outputs.salt-version}}/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}.pkg || \
            curl -fsSL -o /tmp/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}-unsigned.pkg \
            ${{ env.REPO_BASE_URL }}/macos/minor/${{ needs.prepare-workflow.outputs.salt-version}}/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}-unsigned.pkg

          if [ -f /tmp/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}.pkg ]; then
              installer -pkg /tmp/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}.pkg -target /
          elif [ -f /tmp/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}-unsigned.pkg ]; then
              installer -pkg /tmp/salt-${{ needs.prepare-workflow.outputs.salt-version }}-py3-${{ matrix.arch }}-unsigned.pkg -target /
          else
            echo "No downloaded Package?"
            exit 1
          fi

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  test-windows-setup-repo:
    name: Test Windows Repository(setup)
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86
          - AMD64
        version:
          - "2019"
    runs-on:
      - windows-${{ matrix.version }}
    environment: release
    needs:
      - prepare-workflow
      - publish-repositories

    steps:

      - name: Download Salt
        shell: bash
        run: |
          curl -fsSL -o Salt-Minion-${{ needs.prepare-workflow.outputs.salt-version }}-Py3-${{ matrix.arch }}-Setup.exe \
            ${{ env.REPO_BASE_URL }}/windows/minor/${{ needs.prepare-workflow.outputs.salt-version}}/Salt-Minion-${{ needs.prepare-workflow.outputs.salt-version }}-Py3-${{ matrix.arch }}-Setup.exe

      - name: Install Salt
        shell: powershell
        run: |
          Salt-Minion-${{ needs.prepare-workflow.outputs.salt-version }}-Py3-${{ matrix.arch }}.exe /start-minion=0 /S

      - name: Test `salt-call --local test.versions`
        run: |
          salt-call --local test.versions

      - name: Test `salt-call --local grains.items`
        run: |
          salt-call --local grains.items

      - name: Test `salt --version`
        run: |
          salt --version

      - name: Test `salt-master --version`
        run: |
          salt-master --version

      - name: Test `salt-minion --version`
        run: |
          salt-minion --version

      - name: Test `salt-ssh --version`
        run: |
          salt-ssh --version

      - name: Test `salt-syndic --version`
        run: |
          salt-syndic --version

      - name: Test `salt-api --version`
        run: |
          salt-api --version

      - name: Test `salt-cloud --version`
        run: |
          salt-cloud --version

  release:
    name: Release v${{ needs.prepare-workflow.outputs.salt-version }}
    runs-on:
      - self-hosted
      - linux
      - repo-release
    needs:
      - prepare-workflow
      - backup
      - publish-repositories
      - test-amazon-repo
      - test-centos-repo
      - test-centos-stream-repo
      - test-debian-repo
      - test-fedora-repo
      - test-ubuntu-repo
      - test-macos-repo
      - test-windows-setup-repo
    environment: release
    steps:
      - name: Clone The Salt Repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GHA_SSH_KEY }}

      - name: Setup Python Tools Scripts
        uses: ./.github/actions/setup-python-tools-scripts

      - name: Setup GnuPG
        run: |
          sudo install -d -m 0700 -o "$(id -u)" -g "$(id -g)" /run/gpg
          GNUPGHOME="$(mktemp -d -p /run/gpg)"
          echo "GNUPGHOME=${GNUPGHOME}" >> "$GITHUB_ENV"
          cat <<EOF > "${GNUPGHOME}/gpg.conf"
          batch
          no-tty
          pinentry-mode loopback
          EOF

      - name: Get Secrets
        id: get-secrets
        env:
          SECRETS_KEY: ${{ secrets.SECRETS_KEY }}
        run: |
          SECRETS_KEY_FILE=$(mktemp /tmp/output.XXXXXXXXXX)
          echo "$SECRETS_KEY" > "$SECRETS_KEY_FILE"
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256-2023 \
            --query SecretString --output text | jq .default_key -r | base64 -d \
            | gpg --passphrase-file "${SECRETS_KEY_FILE}" -d - \
            | gpg --import -
          sync
          aws --region us-west-2 secretsmanager get-secret-value --secret-id /cmbu-saltstack/signing/repo-signing-keys-sha256-2023 \
            --query SecretString --output text| jq .default_passphrase -r | base64 -d \
            | gpg --passphrase-file "${SECRETS_KEY_FILE}" -o "${GNUPGHOME}/passphrase" -d -
          sync
          rm "$SECRETS_KEY_FILE"
          echo "passphrase-file ${GNUPGHOME}/passphrase" >> "${GNUPGHOME}/gpg.conf"

      - name: Prepare Release
        id: prepare-release
        run: |
          tools pkg repo publish github --repository ${{ github.repository }} --key-id=64CBBC8173D76B3F ${{ needs.prepare-workflow.outputs.salt-version }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global --add safe.directory "$(pwd)"
          git config --global user.name "Salt Project Packaging"
          git config --global user.email saltproject-packaging@vmware.com
          git config --global user.signingkey 64CBBC8173D76B3F
          git config --global commit.gpgsign true

      - name: Apply The Release Patch
        run: |
          git am --committer-date-is-author-date release-artifacts/salt-${{ needs.prepare-workflow.outputs.salt-version }}.patch
          rm release-artifacts/salt-${{ needs.prepare-workflow.outputs.salt-version }}.patch

      - name: Tag The v${{ needs.prepare-workflow.outputs.salt-version }} Release
        run: |
          git tag -m "Release v${{ needs.prepare-workflow.outputs.salt-version }}" -as v${{ needs.prepare-workflow.outputs.salt-version }}

      - name: Push Changes
        uses: ad-m/github-push-action@b87afee92c6e70ea888be6203a3e9426fda49839
        with:
          ssh: true
          tags: true
          atomic: true

      - name: Create Github Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifactErrorsFailBuild: true
          artifacts: ${{ steps.prepare-release.outputs.release-artifacts }}
          bodyFile: ${{ steps.prepare-release.outputs.release-messsage-file }}
          draft: false
          generateReleaseNotes: false
          makeLatest: fromJSON(${{ steps.prepare-release.outputs.make-latest }})
          name: v${{ needs.prepare-workflow.outputs.salt-version }}
          prerelease: ${{ contains(needs.prepare-workflow.outputs.salt-version, 'rc') }}
          removeArtifacts: true
          replacesArtifacts: true
          tag: v${{ needs.prepare-workflow.outputs.salt-version }}

      - name: Publish to PyPi
        env:
          TWINE_PASSWORD: "${{ steps.get-secrets.outputs.twine-password }}"
        run: |
          tools pkg pypi-upload release-artifacts/salt-${{ needs.prepare-workflow.outputs.salt-version }}.tar.gz

  set-pipeline-exit-status:
    # This step is just so we can make github require this step, to pass checks
    # on a pull request instead of requiring all
    name: Set the ${{ github.workflow }} Pipeline Exit Status
    if: always()
    runs-on: ubuntu-latest
    needs:
      - check-requirements
      - prepare-workflow
      - publish-repositories
      - release
    steps:
      - name: Get workflow information
        id: get-workflow-info
        uses: technote-space/workflow-conclusion-action@v3

      - name: Set Pipeline Exit Status
        shell: bash
        run: |
          if [ "${{ steps.get-workflow-info.outputs.conclusion }}" != "success" ]; then
            exit 1
          else
            exit 0
          fi

      - name: Done
        if: always()
        run:
          echo "All worflows finished"
