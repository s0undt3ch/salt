name: Test Artifact

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
        default: Salt Onedir X86_64
        description: The artifact name to download
      vagrant-box-name:
        required: true
        type: string
        default: salt-project-ci/debian-11
        description: The vagrant Box name to use to run tests

    secrets:
      VAGRANT_CLOUD_TOKEN:
        required: true
        description: The vagrant cloud token user to interact with vagrant cloud

env:
  NOX_VERSION: "2022.8.7"

jobs:

  test:
    name: Test
    runs-on:
      - self-hosted
    timeout-minutes: 600  # 10 Hours
    strategy:
      fail-fast: false
      matrix:
        tests-chunk:
          - unit
          - functional
          - integration
          - scenarios

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Download One Dir Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}

      - name: Extract Artifact
        run: |
          mkdir salt-artifacts
          cp salt*tar.xz salt-artifacts/
          cd salt-artifacts
          tar -xpf salt*tar.xz

      - name: Run Tests
        env:
          RERUN_FAILURES: "1"
        run: |
          nox --force-color -e 'test-onedir(coverage=True)' -- \
            --color=yes -ra -vv --run-slow --ssh-tests --output-columns=120 \
            --sys-stats --sysinfo --run-destructive tests/pytests/functional

      - name: Combine Coverage Reports
        if: always() && steps.spin-up-vm.conclusion == 'success'
        run: |
          nox --force-color -e vagrant-combine-coverage -- ${{ inputs.vagrant-box-name }}

      - name: Download Artifacts from Guest
        id: download-artifacts-from-vm
        if: always() && steps.spin-up-vm.conclusion == 'success'
        run: |
          nox --force-color -e vagrant-download-artifacts -- ${{ inputs.vagrant-box-name }}
          tree -a artifacts
          mv artifacts/coverage/.coverage artifacts/coverage/.coverage.${{ inputs.vagrant-box-name }}.${{ matrix.tests-chunk }}

      - name: Destroy VM
        if: always() && steps.spin-up-vm.conclusion == 'success'
        run: |
          vagrant destroy --force ${{ inputs.vagrant-box-name }}

      - name: Upload Test Run Artifacts
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ inputs.vagrant-box-name }}
          path: artifacts

#      - name: Publish Test Report
#        uses: mikepenz/action-junit-report@v3
#        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
#        with:
#          check_name: Test Results(${{ inputs.vagrant-box-name }} ${{ matrix.tests-chunk }})
#          report_paths: 'artifacts/xml-unittests-output/*.xml'

      - name: Report Salt Code Coverage(${{ matrix.tests-chunk }})
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        run: |
          nox --force-color -e report-coverage -- salt

      - name: Report Tests Code Coverage(${{ matrix.tests-chunk }})
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        run: |
          nox --force-color -e report-coverage -- tests

      - name: Report Combined Code Coverage(${{ matrix.tests-chunk }})
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        run: |
          nox --force-color -e report-coverage

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ inputs.vagrant-box-name }}-${{ matrix.tests-chunk }}-tests

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus

  report:
    name: Reports for ${{ inputs.vagrant-box-name }}
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Download Test Run Artifacts
        id: download-test-run-artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts-${{ inputs.vagrant-box-name }}
          path: artifacts

      - name: Show Test Run Artifacts
        if: always() && steps.download-test-run-artifacts.conclusion == 'success'
        run: |
          tree -a artifacts

      - name: Upload Code Coverage DB
        if: always() && steps.download-test-run-artifacts.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: artifacts/coverage

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Nox
        run: |
          python3 -m pip install 'nox==${{ env.NOX_VERSION }}'

      - name: Report Salt Code Coverage
        run: |
          nox --force-color -e report-coverage -- salt

      - name: Report Tests Code Coverage
        run: |
          nox --force-color -e report-coverage -- tests

      - name: Report Combined Code Coverage
        run: |
          nox --force-color -e report-coverage

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        # always run even if the previous steps fails
        if: always() && steps.download-test-run-artifacts.conclusion == 'success'
        with:
          check_name: Overall Test Results(${{ inputs.vagrant-box-name }})
          report_paths: 'artifacts/xml-unittests-output/*.xml'

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ inputs.vagrant-box-name }}-report

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus
