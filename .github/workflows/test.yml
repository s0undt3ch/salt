name: Test Artifact

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
        default: Salt Onedir X86_64
        description: The artifact name to download
      vagrant-box-name:
        required: true
        type: string
        default: salt-project-ci/debian-11
        description: The vagrant Box name to use to run tests

    secrets:
      VAGRANT_CLOUD_TOKEN:
        required: true
        description: The vagrant cloud token user to interact with vagrant cloud


jobs:

  dependencies:
    name: Setup Python Dependencies
    runs-on: macos-12
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Cache nox.${{ inputs.vagrant-box-name }}.tar.xz
        uses: actions/cache@v3
        with:
          path: nox.${{ inputs.vagrant-box-name }}.tar.xz
          key: deps||${{ inputs.vagrant-box-name }}||${{ hashFiles('noxfile.py', 'requirements/**/*.txt') }}

      - name: Show Vagrant Information
        run: |
          vagrant --version
          vagrant plugin list
          echo "VAGRANT_VERSION=$(vagrant --version | cut -d' ' -f2)"  >> $GITHUB_ENV

      - name: Cache Vagrant boxes and plugins
        uses: actions/cache@v3
        with:
          path: |
            ~/.vagrant.d/boxes
            ~/.vagrant.d/gems/${{ env.VAGRANT_VERSION }}/gems/
          key: vagrant|${{ runner.os }}|${{ env.VAGRANT_VERSION }}|${{ inputs.vagrant-box-name }}|${{ hashFiles('Vagrantfile', 'Vagrantfile.boxes.json') }}

      # Check the existance of nox.tar.xz.
      # If it exists, it means the cache was hit and we don't have to regenerate the nox.tar.xz again
      - name: Check nox.${{ inputs.vagrant-box-name }}.tar.xz Exists
        id: check-nox-tarball
        uses: andstor/file-existence-action@v1
        with:
          files: "nox.${{ inputs.vagrant-box-name }}.tar.xz"

      - name: Install macOS Dependencies
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        run: |
          brew install gnu-sed

      - name: Set up Python 3.9
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Nox
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        run: |
          python3 -m pip install nox

      - name: Download One Dir Artifact
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}

      - name: Extract Artifact
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        run: |
          mkdir salt-artifacts
          cp salt*tar.xz salt-artifacts/
          cd salt-artifacts
          tar -xpf salt*tar.xz

      - name: PyPi Proxy
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        run: |
          gsed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\n;' requirements/static/ci/*/*.txt

      - name: Spin up VM
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        env:
          VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}
        run: |
          vagrant up ${{ inputs.vagrant-box-name }}

      - name: Decompress .nox/
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        run: |
          nox --force-color -e vagrant-upload-dependencies -- ${{ inputs.vagrant-box-name }}

      - name: Install Dependencies
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        run: |
          nox --force-color -e vagrant-install-dependencies -- ${{ inputs.vagrant-box-name }}

      - name: Compress And Download .nox Directory
        if: steps.check-nox-tarball.outputs.files_exists != 'true'
        run: |
          nox --force-color -e vagrant-download-dependencies -- ${{ inputs.vagrant-box-name }}

      - name: Destroy VM
        if: steps.check-nox-tarball.outputs.files_exists != 'true' && always()
        run: |
          vagrant destroy --force ${{ inputs.vagrant-box-name }}

      - name: Upload Dependencies
        uses: actions/upload-artifact@v3
        with:
          name: nox-${{ inputs.vagrant-box-name }}
          path: nox.${{ inputs.vagrant-box-name }}.tar.xz

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ inputs.vagrant-box-name }}-deps

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus

  test:
    needs: dependencies
    runs-on: macos-12
    name: Test
    timeout-minutes: 600  # 10 Hours
    strategy:
      fail-fast: false
      matrix:
        tests-chunk:
          - unit
          - functional
          - integration
          - scenarios

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Install macOS Dependencies
        run: |
          brew install tree

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Nox
        run: |
          python3 -m pip install nox

      - name: Download One Dir Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}

      - name: Extract Artifact
        run: |
          mkdir salt-artifacts
          cp salt*tar.xz salt-artifacts/
          cd salt-artifacts
          tar -xpf salt*tar.xz

      - name: Show Vagrant Information
        run: |
          vagrant --version
          vagrant plugin list
          echo "VAGRANT_VERSION=$(vagrant --version | cut -d' ' -f2)"  >> $GITHUB_ENV

      - name: Cache Vagrant boxes and plugins
        uses: actions/cache@v3
        with:
          path: |
            ~/.vagrant.d/boxes
            ~/.vagrant.d/gems/${{ env.VAGRANT_VERSION }}/gems/
          key: vagrant|${{ runner.os }}|${{ env.VAGRANT_VERSION }}|${{ inputs.vagrant-box-name }}|${{ hashFiles('Vagrantfile', 'Vagrantfile.boxes.json') }}

      - name: Download Installed Dependencies
        uses: actions/download-artifact@v3
        with:
          name: nox-${{ inputs.vagrant-box-name }}

      - name: Spin up VM
        id: spin-up-vm
        env:
          VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}
        run: |
          vagrant up ${{ inputs.vagrant-box-name }}

      - name: Decompress .nox/
        run: |
          nox --force-color -e vagrant-upload-dependencies -- ${{ inputs.vagrant-box-name }}

      - name: Run Tests
        env:
          RERUN_FAILURES: "1"
        run: |
          nox --force-color -e vagrant -- ${{ inputs.vagrant-box-name }} ${{ matrix.tests-chunk }}

      - name: Download Artifacts from Guest
        id: download-artifacts-from-vm
        if: always() && steps.spin-up-vm.conclusion == 'success'
        run: |
          nox --force-color -e vagrant-download-artifacts -- ${{ inputs.vagrant-box-name }}
          tree -a artifacts
          mv artifacts/coverage/.coverage artifacts/coverage/.coverage.${{ inputs.vagrant-box-name }}.${{ matrix.tests-chunk }}

      - name: Destroy VM
        if: always() && steps.spin-up-vm.conclusion == 'success'
        run: |
          vagrant destroy --force ${{ inputs.vagrant-box-name }}

      - name: Upload Test Run Artifacts
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ inputs.vagrant-box-name }}
          path: artifacts

#      - name: Publish Test Report
#        uses: mikepenz/action-junit-report@v3
#        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
#        with:
#          check_name: Test Results(${{ inputs.vagrant-box-name }} ${{ matrix.tests-chunk }})
#          report_paths: 'artifacts/xml-unittests-output/*.xml'

      - name: Report Salt Code Coverage(${{ matrix.tests-chunk }})
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        run: |
          nox --force-color -e report-coverage -- salt

      - name: Report Tests Code Coverage(${{ matrix.tests-chunk }})
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        run: |
          nox --force-color -e report-coverage -- tests

      - name: Report Combined Code Coverage(${{ matrix.tests-chunk }})
        if: always() && steps.download-artifacts-from-vm.conclusion == 'success'
        run: |
          nox --force-color -e report-coverage

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ inputs.vagrant-box-name }}-${{ matrix.tests-chunk }}-tests

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus

  report:
    name: Reports for ${{ inputs.vagrant-box-name }}
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Download Test Run Artifacts
        id: download-test-run-artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts-${{ inputs.vagrant-box-name }}
          path: artifacts

      - name: Show Test Run Artifacts
        if: always() && steps.download-test-run-artifacts.conclusion == 'success'
        run: |
          tree -a artifacts

      - name: Upload Code Coverage DB
        if: always() && steps.download-test-run-artifacts.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: artifacts/coverage

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Nox
        run: |
          python3 -m pip install nox

      - name: Report Salt Code Coverage
        run: |
          nox --force-color -e report-coverage -- salt

      - name: Report Tests Code Coverage
        run: |
          nox --force-color -e report-coverage -- tests

      - name: Report Combined Code Coverage
        run: |
          nox --force-color -e report-coverage

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        # always run even if the previous steps fails
        if: always() && steps.download-test-run-artifacts.conclusion == 'success'
        with:
          check_name: Overall Test Results(${{ inputs.vagrant-box-name }})
          report_paths: 'artifacts/xml-unittests-output/*.xml'

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ inputs.vagrant-box-name }}-report

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: exitstatus
          path: exitstatus
