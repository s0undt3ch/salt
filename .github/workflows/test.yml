name: Test Artifact

on:
  workflow_call:
    inputs:
      run_id:
        required: true
        type: string
        description: The workflow run ID from where to pull the artifact
      run_number:
        required: true
        type: string
        description: The workflow run ID number from where to pull the artifact
      trigger_workflow:
        required: true
        type: string
      artifact_name:
        required: true
        type: string
        default: Salt Onedir X86_64
        description: The artifact name to download
      vagrant_box_name:
        required: true
        type: string
        default: salt-project-ci/debian-11
        description: The vagrant Box name to use to run tests


jobs:

  dependencies:
    name: Setup Python Dependencies
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v3

    - name: Cache nox.${{ inputs.vagrant_box_name }}.tar.xz
      uses: actions/cache@v3
      with:
        path: nox.${{ inputs.vagrant_box_name }}.tar.xz
        key: deps||${{ inputs.vagrant_box_name }}||${{ hashFiles('noxfile.py', 'requirements/**/*.txt') }}

    # Check the existance of nox.tar.xz.
    # If it exists, it means the cache was hit and we don't have to regenerate the nox.tar.xz again
    - name: Check nox.${{ inputs.vagrant_box_name }}.tar.xz Exists
      id: check-nox-tarball
      uses: andstor/file-existence-action@v1
      with:
        files: "nox.${{ inputs.vagrant_box_name }}.tar.xz"

    - name: Install macOS Dependencies
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      run: |
        brew install gnu-sed

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Nox
      run: |
        python3 -m pip install nox

    - name: PyPi Proxy
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      run: |
        gsed -i '7s;^;--index-url=https://pypi-proxy.saltstack.net/root/local/+simple/ --extra-index-url=https://pypi.org/simple\n;' requirements/static/ci/*/*.txt

    - name: Show Vagrant Information
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      run: |
        vagrant --version
        vagrant plugin list
        echo "VAGRANT_VERSION=$(vagrant --version | cut -d' ' -f2)"  >> $GITHUB_ENV

    - name: Cache Vagrant boxes and plugins
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      uses: actions/cache@v3
      with:
        path: |
          ~/.vagrant.d/boxes
          ~/.vagrant.d/gems/${{ env.VAGRANT_VERSION }}/gems/
        key: vagrant|${{ runner.os }}|${{ env.VAGRANT_VERSION }}|${{ inputs.vagrant_box_name }}|${{ hashFiles('Vagrantfile') }}

    - name: Spin up VM
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      run: |
        vagrant up ${{ inputs.vagrant_box_name }}

    - name: Decompress .nox/
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      run: |
        nox --force-color -e vagrant-upload-dependencies -- ${{ inputs.vagrant_box_name }}

    - name: Install Dependencies
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      run: |
        nox --force-color -e vagrant-install-dependencies -- ${{ inputs.vagrant_box_name }}

    - name: Compress And Download .nox Directory
      if: steps.check-nox-tarball.outputs.files_exists != 'true'
      run: |
        nox --force-color -e vagrant-download-dependencies -- ${{ inputs.vagrant_box_name }}

    - name: Destroy VM
      if: steps.check-nox-tarball.outputs.files_exists != 'true' && always()
      run: |
        vagrant destroy --force ${{ inputs.vagrant_box_name }}

    - name: Upload Dependencies
      uses: actions/upload-artifact@v3
      with:
        name: nox-${{ inputs.vagrant_box_name }}
        path: nox.${{ inputs.vagrant_box_name }}.tar.xz

    - name: Set Exit Status
      if: always()
      run: |
        mkdir exitstatus
        echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ inputs.vagrant_box_name }}-deps

    - name: Upload Exit Status
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: exitstatus
        path: exitstatus

  test:
    needs: dependencies
    runs-on: macos-12
    name: Test
    timeout-minutes: 600  # 10 Hours
    strategy:
      fail-fast: false
      matrix:
        tests-chunk:
          - unit
          - functional
          - integration
          - scenarios

    steps:
    - uses: actions/checkout@v3

    - name: Install macOS Dependencies
      run: |
        brew install tree

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Nox
      run: |
        python3 -m pip install nox

    - name: Download One Dir Artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact_name }}

    - name: Extract Artifact
      run: |
        mkdir salt-artifacts
        cp salt*tar.xz salt-artifacts/
        cd salt-artifacts
        tar -xpf salt*tar.xz

    - name: Download Installed Dependencies
      uses: actions/download-artifact@v3
      with:
        name: nox-${{ inputs.vagrant_box_name }}

    - name: Spin up VM
      run: |
        vagrant up ${{ inputs.vagrant_box_name }}

    - name: Decompress .nox/
      run: |
        nox --force-color -e vagrant-upload-dependencies -- ${{ inputs.vagrant_box_name }}

    - name: Run Tests
      env:
        RERUN_FAILURES: "1"
      run: |
        nox --force-color -e vagrant -- ${{ inputs.vagrant_box_name }} ${{ matrix.tests-chunk }}

    - name: Download Artifacts from Guest
      if: always()
      run: |
        nox --force-color -e vagrant-download-artifacts -- ${{ inputs.vagrant_box_name }}
        tree artifacts

    - name: Destroy VM
      if: always()
      run: |
        vagrant destroy --force ${{ inputs.vagrant_box_name }}

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      with:
        check_name: Test Results(${{ inputs.vagrant_box_name }} ${{ matrix.tests-chunk }})
        report_paths: 'artifacts/xml-unittests-output/*.xml'

    - name: Set Exit Status
      if: always()
      run: |
        mkdir exitstatus
        echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ inputs.vagrant_box_name }}-tests

    - name: Upload Exit Status
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: exitstatus
        path: exitstatus
