default_language_version:
    python: python3

exclude: ^(doc/_static/.*|doc/_themes/.*)$
repos:
  # ----- Base Hooks ------------------------------------------------------------------------------------------------>
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v2.1.0
    hooks:
      - id: check-merge-conflict  # Check for files that contain merge conflict strings.
      - id: trailing-whitespace   # Trims trailing whitespace.
        args: [--markdown-linebreak-ext=md]
      - id: mixed-line-ending     # Replaces or checks mixed line ending.
        args: [--fix=lf]
      - id: end-of-file-fixer     # Makes sure files end in a newline and only a newline.
      - id: check-merge-conflict  # Check for files that contain merge conflict strings.
      - id: check-ast             # Simply check whether files parse as valid python.
  # <---- Base Hooks -------------------------------------------------------------------------------------------------

  # ----- Local Hooks ----------------------------------------------------------------------------------------------->
  - repo: local
    hooks:
      - id: check-changelog-entries
        name: Check Changelog Entries
        entry: .pre-commit-hooks/check-changelog-entries.py
        language: script

      # ----- Requirements ------------------------------------------------------------------------------------------>
      - id: lock-requirements
        name: Lock Requirements (This takes quite some time)
        files: ^pyproject\.toml$
        pass_filenames: false
        language: python
        language_version: python3
        additional_dependencies:
          - poetry
        entry: poetry lock --no-update

      - id: export-requirements
        alias: export-base-requirements
        name: Export Base Requirements
        files: ^poetry\.lock$
        pass_filenames: false
        language: python
        language_version: python3
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/base.txt

      - id: export-requirements
        alias: export-linux-requirements
        name: Export Linux Requirements
        files: ^poetry\.lock$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/pkg/linux.txt -E linux

      - id: export-requirements
        alias: export-darwin-requirements
        name: Export Darwin Requirements
        files: ^poetry\.lock$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/pkg/darwin.txt -E darwin

      - id: export-requirements
        alias: export-freebsd-requirements
        name: Export FreeBSD Requirements
        files: ^poetry\.lock$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/pkg/freebsd.txt -E freebsd

      - id: export-requirements
        alias: export-windows-requirements
        name: Export Windows Requirements
        files: ^poetry\.lock$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/pkg/windows.txt -E windows

      - id: export-requirements
        alias: export-linux-dev-requirements
        name: Export Linux CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/linux.txt -E linux --dev

      - id: export-requirements
        alias: export-darwin-dev-requirements
        name: Export Darwin CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/darwin.txt -E darwin --dev

      - id: export-requirements
        alias: export-freebsd-dev-requirements
        name: Export FreeBSD CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/freebsd.txt -E freebsd --dev

      - id: export-requirements
        alias: export-windows-dev-requirements
        name: Export Windows CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/windows.txt -E windows --dev

      - id: export-requirements
        alias: export-cloud-dev-requirements
        name: Export Cloud CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/cloud.txt -E cloud --dev

      - id: export-requirements
        alias: export-crypto-dev-requirements
        name: Export Crypto CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/crypto.txt -E crypto --dev

      - id: export-requirements
        alias: export-docs-dev-requirements
        name: Export Docs Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/docs.txt -E docs --dev

      - id: export-requirements
        alias: export-lint-dev-requirements
        name: Export Lint CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/lint.txt -E lint --dev

      - id: export-requirements
        alias: export-invoke-dev-requirements
        name: Export Invoke CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/invoke.txt -E invoke --dev

      - id: export-requirements
        alias: export-cangelog-dev-requirements
        name: Export Changelog CI Requirements
        files: ^(poetry\.lock|pyproject\.toml)$
        language: python
        language_version: python3
        pass_filenames: false
        additional_dependencies:
          - poetry
        entry: poetry export --without-hashes -f requirements.txt -o requirements/static/ci/cangelog.txt -E cangelog --dev
      # <---- Requirements--------------------------------------------------------------------------------------------
  # <---- Local Hooks ------------------------------------------------------------------------------------------------

  # ----- Code Formatting ------------------------------------------------------------------------------------------->
  - repo: https://github.com/asottile/pyupgrade
    # This, for now, is meant to run when locally committing code and will be disabled(skipped) when we run pre-commit
    # against all codebase to avoid MASSIVE code churn. This way, we do it in smaller chunks, a few at a time.
    rev: v2.7.2
    hooks:
      - id: pyupgrade
        name: Drop six usage and Py2 support
        args: [--py3-plus, --keep-mock]
        exclude: >
          (?x)^(
            salt/client/ssh/ssh_py_shim.py|
            salt/ext/ipaddress.py
          )$

  - repo: https://github.com/saltstack/pre-commit-remove-import-headers
    rev: 1.1.0
    hooks:
      - id: remove-import-headers

  - repo: https://github.com/s0undt3ch/salt-rewrite
    # Automatically rewrite code with known rules
    rev: 1.0.0
    hooks:
      - id: salt-rewrite
        files: ^tests/.*\.py$
        args: [-E, fix_asserts]

  - repo: https://github.com/timothycrosley/isort
    rev: "1e78a9acf3110e1f9721feb591f89a451fc9876a"
    hooks:
      - id: isort
        additional_dependencies: ['toml']
        # This tells pre-commit not to pass files to isort.
        # This should be kept in sync with pyproject.toml
        exclude: >
            (?x)^(
                templates/.*|
                salt/ext/.*|
                tests/kitchen/.*
            )$

  - repo: https://github.com/psf/black
    rev: 19.10b0
    hooks:
      - id: black
        # This tells pre-commit not to pass files to black.
        # This should be kept in sync with pyproject.toml
        exclude: >
            (?x)^(
                templates/.*|
                salt/ext/.*|
                tests/kitchen/.*
            )$

  - repo: https://github.com/myint/rstcheck
    # This, for now, is meant to run when locally committing code and will be disabled(skipped) when we run pre-commit
    # against all codebase to avoid MASSIVE code churn. This way, we do it in smaller chunks, a few at a time.
    rev: 3f92957
    hooks:
      - id: rstcheck
        name: Check reST files using rstcheck
        args: [--report=warning]
        additional_dependencies: [sphinx]

  - repo: https://github.com/asottile/blacken-docs
    rev: v1.7.0
    hooks:
      - id: blacken-docs
        args: [--skip-errors]
        files: ^doc/.*\.rst
        additional_dependencies: [black==19.10b0]
  # <---- Code Formatting --------------------------------------------------------------------------------------------

  # ----- Security -------------------------------------------------------------------------------------------------->
  - repo: https://github.com/PyCQA/bandit
    rev: "1.7.0"
    hooks:
      - id: bandit
        alias: bandit-salt
        name: Run bandit against Salt
        args: [--silent, -lll, --skip, B701]
        exclude: >
            (?x)^(
                templates/.*|
                salt/ext/.*|
                tests/.*
            )$
  - repo: https://github.com/PyCQA/bandit
    rev: "1.7.0"
    hooks:
      - id: bandit
        alias: bandit-tests
        name: Run bandit against the test suite
        args: [--silent, -lll, --skip, B701]
        files: ^tests/.*
        exclude: ^tests/minionswarm\.py
  # <---- Security ---------------------------------------------------------------------------------------------------

  # ----- Pre-Commit ------------------------------------------------------------------------------------------------>
  - repo: https://github.com/saltstack/mirrors-nox
    rev: v2020.8.22
    hooks:
      - id: nox
        alias: lint-salt
        name: Lint Salt
        files: ^((setup|noxfile)|(salt|tasks)/.*)\.py$
        exclude: >
            (?x)^(
                templates/.*|
                salt/ext/.*|
            )$
        args:
          - -e
          - lint-salt-pre-commit
          - --

  - repo: https://github.com/saltstack/mirrors-nox
    rev: v2020.8.22
    hooks:
      - id: nox
        alias: lint-tests
        name: Lint Tests
        files: ^tests/.*\.py$
        args:
          - -e
          - lint-tests-pre-commit
          - --

  - repo: https://github.com/saltstack/mirrors-nox
    rev: v2020.8.22
    hooks:
      - id: nox
        alias: check-docs
        name: Check Docs
        files: ^(salt/.*\.py|doc/ref/.*\.rst)$
        args:
          - -e
          - invoke-pre-commit
          - --
          - docs.check

  - repo: https://github.com/saltstack/mirrors-nox
    rev: v2020.8.22
    hooks:
      - id: nox
        alias: check-filemap
        name: Check Filename Map Change Matching
        files: ^tests/(filename_map\.yml|.*\.py)$
        pass_filenames: false
        args:
          - -e
          - invoke-pre-commit
          - --
          - filemap.check
  # <---- Pre-Commit -------------------------------------------------------------------------------------------------
